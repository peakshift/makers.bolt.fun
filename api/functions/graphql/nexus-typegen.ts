/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddProjectToTournamentInput: { // input type
    project_id: number; // Int!
    tournament_id: number; // Int!
    track_id: number; // Int!
  }
  CreateProjectInput: { // input type
    capabilities: number[]; // [Int!]!
    category_id: number; // Int!
    cover_image: NexusGenInputs['ImageInput']; // ImageInput!
    description: string; // String!
    discord?: string | null; // String
    figma?: string | null; // String
    github?: string | null; // String
    hashtag: string; // String!
    id?: number | null; // Int
    launch_status: NexusGenEnums['ProjectLaunchStatusEnum']; // ProjectLaunchStatusEnum!
    lightning_address?: string | null; // String
    members: NexusGenInputs['TeamMemberInput'][]; // [TeamMemberInput!]!
    npub?: string | null; // String
    recruit_roles: number[]; // [Int!]!
    replit?: string | null; // String
    screenshots: NexusGenInputs['ImageInput'][]; // [ImageInput!]!
    slack?: string | null; // String
    tagline: string; // String!
    telegram?: string | null; // String
    thumbnail_image: NexusGenInputs['ImageInput']; // ImageInput!
    title: string; // String!
    tournaments: number[]; // [Int!]!
    twitter?: string | null; // String
    website: string; // String!
  }
  CreateTournamentFAQInput: { // input type
    answer: string; // String!
    question: string; // String!
  }
  CreateTournamentInput: { // input type
    config: NexusGenInputs['TournamentConfigInput']; // TournamentConfigInput!
    contacts: NexusGenInputs['TournamentContactInput'][]; // [TournamentContactInput!]!
    cover_image: NexusGenInputs['ImageInput']; // ImageInput!
    description: string; // String!
    end_date: NexusGenScalars['Date']; // Date!
    faqs: NexusGenInputs['CreateTournamentFAQInput'][]; // [CreateTournamentFAQInput!]!
    judges: NexusGenInputs['CreateTournamentJudgeInput'][]; // [CreateTournamentJudgeInput!]!
    location: string; // String!
    makers_deals: NexusGenInputs['TournamentMakerDealInput'][]; // [TournamentMakerDealInput!]!
    partners: NexusGenInputs['TournamentPartnerInput'][]; // [TournamentPartnerInput!]!
    prizes: NexusGenInputs['TournamentPrizeInput'][]; // [TournamentPrizeInput!]!
    schedule: NexusGenInputs['TournamentScheduleInput'][]; // [TournamentScheduleInput!]!
    slug: string; // String!
    start_date: NexusGenScalars['Date']; // Date!
    thumbnail_image: NexusGenInputs['ImageInput']; // ImageInput!
    title: string; // String!
    tracks: NexusGenInputs['CreateTournamentTrackInput'][]; // [CreateTournamentTrackInput!]!
    website?: string | null; // String
  }
  CreateTournamentJudgeInput: { // input type
    avatar?: NexusGenInputs['ImageInput'] | null; // ImageInput
    company: string; // String!
    name: string; // String!
  }
  CreateTournamentTrackInput: { // input type
    icon: string; // String!
    title: string; // String!
  }
  ImageInput: { // input type
    id?: string | null; // String
    name?: string | null; // String
    provider_id?: string | null; // String
    url: string; // String!
  }
  MakerRoleInput: { // input type
    id: number; // Int!
    level: NexusGenEnums['RoleLevelEnum']; // RoleLevelEnum!
  }
  MakerSkillInput: { // input type
    id: number; // Int!
  }
  NostrEventInput: { // input type
    content: string; // String!
    created_at: number; // Int!
    id: string; // String!
    kind: number; // Int!
    pubkey: string; // String!
    sig: string; // String!
    tags: string[][]; // [[String!]!]!
  }
  ProfileDetailsInput: { // input type
    avatar?: NexusGenInputs['ImageInput'] | null; // ImageInput
    bio?: string | null; // String
    discord?: string | null; // String
    email?: string | null; // String
    github?: string | null; // String
    jobTitle?: string | null; // String
    lightning_address?: string | null; // String
    linkedin?: string | null; // String
    location?: string | null; // String
    name?: string | null; // String
    twitter?: string | null; // String
    website?: string | null; // String
  }
  ProfileRolesInput: { // input type
    roles: NexusGenInputs['MakerRoleInput'][]; // [MakerRoleInput!]!
    skills: NexusGenInputs['MakerSkillInput'][]; // [MakerSkillInput!]!
  }
  RegisterInTournamentInput: { // input type
    email: string; // String!
    hacking_status: NexusGenEnums['TournamentMakerHackingStatusEnum']; // TournamentMakerHackingStatusEnum!
  }
  StoryInputType: { // input type
    body: string; // String!
    cover_image?: NexusGenInputs['ImageInput'] | null; // ImageInput
    id?: number | null; // Int
    is_published?: boolean | null; // Boolean
    project_id?: number | null; // Int
    tags: string[]; // [String!]!
    title: string; // String!
  }
  TeamMemberInput: { // input type
    id: number; // Int!
    role: NexusGenEnums['TEAM_MEMBER_ROLE']; // TEAM_MEMBER_ROLE!
  }
  TournamentConfigInput: { // input type
    feedFilters?: string[] | null; // [String!]
    ideasRootNostrEventId?: string | null; // String
    mainFeedHashtag?: string | null; // String
    projectsSubmissionOpen: boolean; // Boolean!
    registerationOpen: boolean; // Boolean!
    showFeed?: boolean | null; // Boolean
  }
  TournamentContactInput: { // input type
    type: string; // String!
    url: string; // String!
  }
  TournamentMakerDealInput: { // input type
    description: string; // String!
    title: string; // String!
    url?: string | null; // String
  }
  TournamentPartnerInput: { // input type
    items: NexusGenInputs['TournamentPartnerItemInput'][]; // [TournamentPartnerItemInput!]!
    title: string; // String!
  }
  TournamentPartnerItemInput: { // input type
    image: string; // String!
    isBigImage?: boolean | null; // Boolean
    url: string; // String!
  }
  TournamentPrizeAdditionalPrizeInput: { // input type
    text: string; // String!
    url?: string | null; // String
  }
  TournamentPrizeInput: { // input type
    additional_prizes?: NexusGenInputs['TournamentPrizeAdditionalPrizeInput'][] | null; // [TournamentPrizeAdditionalPrizeInput!]
    description: string; // String!
    image: string; // String!
    positions: NexusGenInputs['TournamentPrizePositionInput'][]; // [TournamentPrizePositionInput!]!
    title: string; // String!
  }
  TournamentPrizePositionInput: { // input type
    position: string; // String!
    project?: string | null; // String
    reward: string; // String!
  }
  TournamentScheduleEventInput: { // input type
    location?: string | null; // String
    time?: string | null; // String
    timezone?: string | null; // String
    title: string; // String!
    type?: string | null; // String
    url?: string | null; // String
  }
  TournamentScheduleInput: { // input type
    date: string; // String!
    events: NexusGenInputs['TournamentScheduleEventInput'][]; // [TournamentScheduleEventInput!]!
  }
  UpdateProjectInput: { // input type
    capabilities: number[]; // [Int!]!
    category_id: number; // Int!
    cover_image: NexusGenInputs['ImageInput']; // ImageInput!
    description: string; // String!
    discord?: string | null; // String
    figma?: string | null; // String
    github?: string | null; // String
    hashtag: string; // String!
    id?: number | null; // Int
    launch_status: NexusGenEnums['ProjectLaunchStatusEnum']; // ProjectLaunchStatusEnum!
    lightning_address?: string | null; // String
    members: NexusGenInputs['TeamMemberInput'][]; // [TeamMemberInput!]!
    npub?: string | null; // String
    recruit_roles: number[]; // [Int!]!
    replit?: string | null; // String
    screenshots: NexusGenInputs['ImageInput'][]; // [ImageInput!]!
    slack?: string | null; // String
    tagline: string; // String!
    telegram?: string | null; // String
    thumbnail_image: NexusGenInputs['ImageInput']; // ImageInput!
    title: string; // String!
    tournaments: number[]; // [Int!]!
    twitter?: string | null; // String
    website: string; // String!
  }
  UpdateTournamentInput: { // input type
    config?: NexusGenInputs['TournamentConfigInput'] | null; // TournamentConfigInput
    contacts?: NexusGenInputs['TournamentContactInput'][] | null; // [TournamentContactInput!]
    description?: string | null; // String
    end_date?: NexusGenScalars['Date'] | null; // Date
    id?: number | null; // Int
    location?: string | null; // String
    makers_deals?: NexusGenInputs['TournamentMakerDealInput'][] | null; // [TournamentMakerDealInput!]
    partners?: NexusGenInputs['TournamentPartnerInput'][] | null; // [TournamentPartnerInput!]
    prizes?: NexusGenInputs['TournamentPrizeInput'][] | null; // [TournamentPrizeInput!]
    schedule?: NexusGenInputs['TournamentScheduleInput'][] | null; // [TournamentScheduleInput!]
    start_date?: NexusGenScalars['Date'] | null; // Date
    title?: string | null; // String
    website?: string | null; // String
  }
  UpdateTournamentRegistrationInput: { // input type
    email?: string | null; // String
    hacking_status?: NexusGenEnums['TournamentMakerHackingStatusEnum'] | null; // TournamentMakerHackingStatusEnum
  }
  UserEmailInputType: { // input type
    email: string; // String!
  }
  UserKeyInputType: { // input type
    key: string; // String!
    name: string; // String!
  }
}

export interface NexusGenEnums {
  POST_TYPE: "Bounty" | "Question" | "Story"
  ProjectLaunchStatusEnum: "Launched" | "WIP"
  ProjectPermissionEnum: "DeleteProject" | "UpdateAdmins" | "UpdateInfo" | "UpdateMembers"
  RoleLevelEnum: 3 | 0 | 1 | 2 | 4
  TEAM_MEMBER_ROLE: "Admin" | "Maker" | "Owner"
  TournamentEventTypeEnum: 2 | 3 | 0 | 1
  TournamentMakerHackingStatusEnum: 1 | 0
  VOTE_ITEM_TYPE: "Bounty" | "PostComment" | "Project" | "Question" | "Story" | "User"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  Author: { // root type
    id: number; // Int!
    join_date: NexusGenScalars['Date']; // Date!
    lightning_address?: string | null; // String
    name: string; // String!
  }
  Award: { // root type
    id: number; // Int!
    image: string; // String!
    title: string; // String!
    url: string; // String!
  }
  Bounty: { // root type
    applicants_count: number; // Int!
    applications: NexusGenRootTypes['BountyApplication'][]; // [BountyApplication!]!
    body: string; // String!
    cover_image?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    deadline: string; // String!
    excerpt: string; // String!
    id: number; // Int!
    is_published?: boolean | null; // Boolean
    reward_amount: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes_count: number; // Int!
  }
  BountyApplication: { // root type
    author: NexusGenRootTypes['User']; // User!
    date: string; // String!
    id: number; // Int!
    workplan: string; // String!
  }
  Capability: { // root type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Category: { // root type
    icon?: string | null; // String
    id: number; // Int!
    title: string; // String!
  }
  CreateProjectResponse: { // root type
    project: NexusGenRootTypes['Project']; // Project!
  }
  Donation: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    paid: boolean; // Boolean!
    payment_hash: string; // String!
    payment_request: string; // String!
  }
  DonationsStats: { // root type
    applications: string; // String!
    donations: string; // String!
    prizes: string; // String!
    touranments: string; // String!
  }
  GenericMakerRole: { // root type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Hackathon: { // root type
    description: string; // String!
    end_date: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    location: string; // String!
    start_date: NexusGenScalars['Date']; // Date!
    title: string; // String!
    website: string; // String!
  }
  LinkedEmail: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
  }
  LnurlDetails: { // root type
    commentAllowed?: number | null; // Int
    maxSendable?: number | null; // Int
    metadata?: string | null; // String
    minSendable?: number | null; // Int
  }
  MakerRole: { // root type
    icon: string; // String!
    id: number; // Int!
    level: NexusGenEnums['RoleLevelEnum']; // RoleLevelEnum!
    title: string; // String!
  }
  MakerSkill: { // root type
    id: number; // Int!
    title: string; // String!
  }
  Mutation: {};
  NostrKey: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    is_primary: boolean; // Boolean!
    key: string; // String!
    label: string; // String!
  }
  NostrKeyWithUser: { // root type
    key: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  ParticipationInfo: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    hacking_status: NexusGenEnums['TournamentMakerHackingStatusEnum']; // TournamentMakerHackingStatusEnum!
    projects: NexusGenRootTypes['ProjectInTournament'][]; // [ProjectInTournament!]!
  }
  PostComment: { // root type
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    created_at: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    parentId?: number | null; // Int
    votes_count: number; // Int!
  }
  Project: { // root type
    description: string; // String!
    discord?: string | null; // String
    figma?: string | null; // String
    github?: string | null; // String
    hashtag: string; // String!
    id: number; // Int!
    launch_status: NexusGenEnums['ProjectLaunchStatusEnum']; // ProjectLaunchStatusEnum!
    lightning_address?: string | null; // String
    lnurl_callback_url?: string | null; // String
    npub?: string | null; // String
    replit?: string | null; // String
    slack?: string | null; // String
    tagline: string; // String!
    telegram?: string | null; // String
    title: string; // String!
    twitter?: string | null; // String
    votes_count: number; // Int!
    website: string; // String!
  }
  ProjectInTournament: { // root type
    project: NexusGenRootTypes['Project']; // Project!
    track?: NexusGenRootTypes['TournamentTrack'] | null; // TournamentTrack
  }
  ProjectMember: { // root type
    role: NexusGenEnums['TEAM_MEMBER_ROLE']; // TEAM_MEMBER_ROLE!
    user: NexusGenRootTypes['User']; // User!
  }
  ProjectTournament: { // root type
    tournament: NexusGenRootTypes['Tournament']; // Tournament!
    track: NexusGenRootTypes['TournamentTrack']; // TournamentTrack!
  }
  Query: {};
  Question: { // root type
    body: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    excerpt: string; // String!
    id: number; // Int!
    is_published?: boolean | null; // Boolean
    title: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes_count: number; // Int!
  }
  Story: { // root type
    body: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    excerpt: string; // String!
    id: number; // Int!
    is_published?: boolean | null; // Boolean
    nostr_event_id?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes_count: number; // Int!
  }
  Tag: { // root type
    description?: string | null; // String
    github?: string | null; // String
    icon?: string | null; // String
    id: number; // Int!
    isOfficial?: boolean | null; // Boolean
    long_description?: string | null; // String
    title: string; // String!
  }
  TagLink: { // root type
    name: string; // String!
    url: string; // String!
  }
  Tournament: { // root type
    description: string; // String!
    end_date: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    location: string; // String!
    slug: string; // String!
    start_date: NexusGenScalars['Date']; // Date!
    title: string; // String!
    website?: string | null; // String
  }
  TournamentConfig: { // root type
    feedFilters?: string[] | null; // [String!]
    ideasRootNostrEventId?: string | null; // String
    mainFeedHashtag?: string | null; // String
    projectsSubmissionClosesOn?: string | null; // String
    projectsSubmissionOpen: boolean; // Boolean!
    registerationOpen: boolean; // Boolean!
    showFeed?: boolean | null; // Boolean
  }
  TournamentContact: { // root type
    type: string; // String!
    url: string; // String!
  }
  TournamentEvent: { // root type
    description: string; // String!
    ends_at: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    location: string; // String!
    starts_at: NexusGenScalars['Date']; // Date!
    title: string; // String!
    type: NexusGenEnums['TournamentEventTypeEnum']; // TournamentEventTypeEnum!
    website: string; // String!
  }
  TournamentFAQ: { // root type
    answer: string; // String!
    id: number; // Int!
    question: string; // String!
  }
  TournamentJudge: { // root type
    company?: string | null; // String
    name: string; // String!
    twitter?: string | null; // String
  }
  TournamentMakerDeal: { // root type
    description: string; // String!
    title: string; // String!
    url?: string | null; // String
  }
  TournamentMakersResponse: { // root type
    hasNext?: boolean | null; // Boolean
    hasPrev?: boolean | null; // Boolean
    makers: NexusGenRootTypes['TournamentParticipant'][]; // [TournamentParticipant!]!
  }
  TournamentParticipant: { // root type
    hacking_status: NexusGenEnums['TournamentMakerHackingStatusEnum']; // TournamentMakerHackingStatusEnum!
    is_registered?: boolean | null; // Boolean
    user: NexusGenRootTypes['User']; // User!
  }
  TournamentPartner: { // root type
    items: NexusGenRootTypes['TournamentPartnerItem'][]; // [TournamentPartnerItem!]!
    title: string; // String!
  }
  TournamentPartnerItem: { // root type
    image: string; // String!
    isBigImage?: boolean | null; // Boolean
    url: string; // String!
  }
  TournamentPrize: { // root type
    additional_prizes?: NexusGenRootTypes['TournamentPrizeAdditionalPrize'][] | null; // [TournamentPrizeAdditionalPrize!]
    description: string; // String!
    image: string; // String!
    positions: NexusGenRootTypes['TournamentPrizePosition'][]; // [TournamentPrizePosition!]!
    title: string; // String!
  }
  TournamentPrizeAdditionalPrize: { // root type
    text: string; // String!
    url?: string | null; // String
  }
  TournamentPrizePosition: { // root type
    position: string; // String!
    project?: string | null; // String
    reward: string; // String!
  }
  TournamentProjectsResponse: { // root type
    allItemsCount?: number | null; // Int
    hasNext?: boolean | null; // Boolean
    hasPrev?: boolean | null; // Boolean
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
  }
  TournamentSchedule: { // root type
    date: string; // String!
    events: NexusGenRootTypes['TournamentScheduleEvent'][]; // [TournamentScheduleEvent!]!
  }
  TournamentScheduleEvent: { // root type
    location?: string | null; // String
    time?: string | null; // String
    timezone?: string | null; // String
    title: string; // String!
    type?: string | null; // String
    url?: string | null; // String
  }
  TournamentTrack: { // root type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  User: { // root type
    bio?: string | null; // String
    discord?: string | null; // String
    github?: string | null; // String
    id: number; // Int!
    jobTitle?: string | null; // String
    join_date: NexusGenScalars['Date']; // Date!
    last_seen_notification_time: NexusGenScalars['Date']; // Date!
    lightning_address?: string | null; // String
    linkedin?: string | null; // String
    location?: string | null; // String
    name: string; // String!
    role?: string | null; // String
    twitter?: string | null; // String
    website?: string | null; // String
  }
  UserPrivateData: { // root type
    default_nostr_prv_key?: string | null; // String
    default_nostr_pub_key?: string | null; // String
    email?: string | null; // String
    id: number; // Int!
  }
  Vote: { // root type
    amount_in_sat: number; // Int!
    id: number; // Int!
    item_id: number; // Int!
    item_type: NexusGenEnums['VOTE_ITEM_TYPE']; // VOTE_ITEM_TYPE!
    paid: boolean; // Boolean!
    payment_hash: string; // String!
    payment_request: string; // String!
  }
  Voter: { // root type
    amount_voted: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Votes: { // root type
    total: number; // Int!
    total_anonymous_votes: number; // Int!
    voters: NexusGenRootTypes['Voter'][]; // [Voter!]!
  }
  WalletKey: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    is_current: boolean; // Boolean!
    key: string; // String!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
  BaseUser: NexusGenRootTypes['User'];
  PostBase: NexusGenRootTypes['Bounty'] | NexusGenRootTypes['Question'] | NexusGenRootTypes['Story'];
}

export interface NexusGenUnions {
  Post: NexusGenRootTypes['Bounty'] | NexusGenRootTypes['Question'] | NexusGenRootTypes['Story'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Author: { // field return type
    avatar: string; // String!
    id: number; // Int!
    join_date: NexusGenScalars['Date']; // Date!
    lightning_address: string | null; // String
    name: string; // String!
  }
  Award: { // field return type
    id: number; // Int!
    image: string; // String!
    project: NexusGenRootTypes['Project']; // Project!
    title: string; // String!
    url: string; // String!
  }
  Bounty: { // field return type
    applicants_count: number; // Int!
    applications: NexusGenRootTypes['BountyApplication'][]; // [BountyApplication!]!
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    cover_image: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    deadline: string; // String!
    excerpt: string; // String!
    id: number; // Int!
    is_published: boolean | null; // Boolean
    reward_amount: number; // Int!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    title: string; // String!
    type: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes: NexusGenRootTypes['Votes']; // Votes!
    votes_count: number; // Int!
  }
  BountyApplication: { // field return type
    author: NexusGenRootTypes['User']; // User!
    date: string; // String!
    id: number; // Int!
    workplan: string; // String!
  }
  Capability: { // field return type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Category: { // field return type
    apps_count: number; // Int!
    cover_image: string | null; // String
    icon: string | null; // String
    id: number; // Int!
    project: NexusGenRootTypes['Project'][]; // [Project!]!
    title: string; // String!
    votes_sum: number; // Int!
  }
  CreateProjectResponse: { // field return type
    project: NexusGenRootTypes['Project']; // Project!
  }
  Donation: { // field return type
    amount: number; // Int!
    by: NexusGenRootTypes['User'] | null; // User
    createdAt: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    paid: boolean; // Boolean!
    payment_hash: string; // String!
    payment_request: string; // String!
  }
  DonationsStats: { // field return type
    applications: string; // String!
    donations: string; // String!
    prizes: string; // String!
    touranments: string; // String!
  }
  GenericMakerRole: { // field return type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  Hackathon: { // field return type
    cover_image: string; // String!
    description: string; // String!
    end_date: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    location: string; // String!
    start_date: NexusGenScalars['Date']; // Date!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    title: string; // String!
    website: string; // String!
  }
  LinkedEmail: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
  }
  LnurlDetails: { // field return type
    commentAllowed: number | null; // Int
    maxSendable: number | null; // Int
    metadata: string | null; // String
    minSendable: number | null; // Int
  }
  MakerRole: { // field return type
    icon: string; // String!
    id: number; // Int!
    level: NexusGenEnums['RoleLevelEnum']; // RoleLevelEnum!
    title: string; // String!
  }
  MakerSkill: { // field return type
    id: number; // Int!
    title: string; // String!
  }
  Mutation: { // field return type
    addProjectToTournament: NexusGenRootTypes['ParticipationInfo'] | null; // ParticipationInfo
    confirmDonation: NexusGenRootTypes['Donation']; // Donation!
    confirmVote: NexusGenRootTypes['Vote']; // Vote!
    createProject: NexusGenRootTypes['CreateProjectResponse'] | null; // CreateProjectResponse
    createStory: NexusGenRootTypes['Story'] | null; // Story
    createTournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    deleteProject: NexusGenRootTypes['Project'] | null; // Project
    deleteStory: NexusGenRootTypes['Story'] | null; // Story
    donate: NexusGenRootTypes['Donation']; // Donation!
    linkNostrKey: NexusGenRootTypes['User'] | null; // User
    registerInTournament: NexusGenRootTypes['User'] | null; // User
    setUserNostrKeyAsPrimary: NexusGenRootTypes['User'] | null; // User
    unlinkNostrKey: NexusGenRootTypes['User'] | null; // User
    updateLastSeenNotificationTime: NexusGenRootTypes['User'] | null; // User
    updateProfileDetails: NexusGenRootTypes['User'] | null; // User
    updateProfileRoles: NexusGenRootTypes['User'] | null; // User
    updateProject: NexusGenRootTypes['CreateProjectResponse'] | null; // CreateProjectResponse
    updateTournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    updateTournamentRegistration: NexusGenRootTypes['ParticipationInfo'] | null; // ParticipationInfo
    updateUserPreferences: NexusGenRootTypes['User']; // User!
    vote: NexusGenRootTypes['Vote']; // Vote!
  }
  NostrKey: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    is_primary: boolean; // Boolean!
    key: string; // String!
    label: string; // String!
  }
  NostrKeyWithUser: { // field return type
    key: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  ParticipationInfo: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    hacking_status: NexusGenEnums['TournamentMakerHackingStatusEnum']; // TournamentMakerHackingStatusEnum!
    projects: NexusGenRootTypes['ProjectInTournament'][]; // [ProjectInTournament!]!
  }
  PostComment: { // field return type
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    created_at: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    parentId: number | null; // Int
    votes_count: number; // Int!
  }
  Project: { // field return type
    awards: NexusGenRootTypes['Award'][]; // [Award!]!
    capabilities: NexusGenRootTypes['Capability'][]; // [Capability!]!
    category: NexusGenRootTypes['Category']; // Category!
    cover_image: string | null; // String
    description: string; // String!
    discord: string | null; // String
    figma: string | null; // String
    github: string | null; // String
    hashtag: string; // String!
    id: number; // Int!
    launch_status: NexusGenEnums['ProjectLaunchStatusEnum']; // ProjectLaunchStatusEnum!
    lightning_address: string | null; // String
    lnurl_callback_url: string | null; // String
    members: NexusGenRootTypes['ProjectMember'][]; // [ProjectMember!]!
    members_count: number; // Int!
    npub: string | null; // String
    permissions: NexusGenEnums['ProjectPermissionEnum'][]; // [ProjectPermissionEnum!]!
    recruit_roles: NexusGenRootTypes['MakerRole'][]; // [MakerRole!]!
    replit: string | null; // String
    screenshots: string[]; // [String!]!
    slack: string | null; // String
    stories: NexusGenRootTypes['Story'][]; // [Story!]!
    tagline: string; // String!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    telegram: string | null; // String
    thumbnail_image: string | null; // String
    title: string; // String!
    tournaments: NexusGenRootTypes['ProjectTournament'][]; // [ProjectTournament!]!
    twitter: string | null; // String
    votes_count: number; // Int!
    website: string; // String!
  }
  ProjectInTournament: { // field return type
    project: NexusGenRootTypes['Project']; // Project!
    track: NexusGenRootTypes['TournamentTrack'] | null; // TournamentTrack
  }
  ProjectMember: { // field return type
    role: NexusGenEnums['TEAM_MEMBER_ROLE']; // TEAM_MEMBER_ROLE!
    user: NexusGenRootTypes['User']; // User!
  }
  ProjectTournament: { // field return type
    tournament: NexusGenRootTypes['Tournament']; // Tournament!
    track: NexusGenRootTypes['TournamentTrack']; // TournamentTrack!
  }
  Query: { // field return type
    activeUsers: NexusGenRootTypes['User'][]; // [User!]!
    allCategories: NexusGenRootTypes['Category'][]; // [Category!]!
    allProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    checkValidProjectHashtag: boolean; // Boolean!
    getAllCapabilities: NexusGenRootTypes['Capability'][]; // [Capability!]!
    getAllHackathons: NexusGenRootTypes['Hackathon'][]; // [Hackathon!]!
    getAllMakersRoles: NexusGenRootTypes['GenericMakerRole'][]; // [GenericMakerRole!]!
    getAllMakersSkills: NexusGenRootTypes['MakerSkill'][]; // [MakerSkill!]!
    getCategory: NexusGenRootTypes['Category']; // Category!
    getDonationsStats: NexusGenRootTypes['DonationsStats']; // DonationsStats!
    getFeed: NexusGenRootTypes['Post'][]; // [Post!]!
    getLnurlDetailsForProject: NexusGenRootTypes['LnurlDetails']; // LnurlDetails!
    getMakersInTournament: NexusGenRootTypes['TournamentMakersResponse']; // TournamentMakersResponse!
    getMyDrafts: NexusGenRootTypes['Post'][]; // [Post!]!
    getPostById: NexusGenRootTypes['Post']; // Post!
    getProject: NexusGenRootTypes['Project']; // Project!
    getProjectsById: NexusGenRootTypes['Project'][]; // [Project!]!
    getProjectsInTournament: NexusGenRootTypes['TournamentProjectsResponse']; // TournamentProjectsResponse!
    getTagInfo: NexusGenRootTypes['Tag']; // Tag!
    getTournamentById: NexusGenRootTypes['Tournament']; // Tournament!
    getTournamentToRegister: NexusGenRootTypes['Tournament'][]; // [Tournament!]!
    getTrendingPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    hottestProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    me: NexusGenRootTypes['User'] | null; // User
    newProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    officialTags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    popularTags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    profile: NexusGenRootTypes['User'] | null; // User
    projectsByCategory: NexusGenRootTypes['Project'][]; // [Project!]!
    pubkeysOfMakersInTournament: string[]; // [String!]!
    pubkeysOfProjectsInTournament: string[]; // [String!]!
    recentProjectsInTag: NexusGenRootTypes['Project'][]; // [Project!]!
    searchProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    searchUsers: NexusGenRootTypes['User'][]; // [User!]!
    similarMakers: NexusGenRootTypes['User'][]; // [User!]!
    similarProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    tournamentParticipationInfo: NexusGenRootTypes['ParticipationInfo'] | null; // ParticipationInfo
    usersByNostrKeys: NexusGenRootTypes['NostrKeyWithUser'][]; // [NostrKeyWithUser!]!
  }
  Question: { // field return type
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    excerpt: string; // String!
    id: number; // Int!
    is_published: boolean | null; // Boolean
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    title: string; // String!
    type: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes: NexusGenRootTypes['Votes']; // Votes!
    votes_count: number; // Int!
  }
  Story: { // field return type
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    comments: NexusGenRootTypes['PostComment'][]; // [PostComment!]!
    comments_count: number; // Int!
    cover_image: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    excerpt: string; // String!
    id: number; // Int!
    is_published: boolean | null; // Boolean
    nostr_event_id: string | null; // String
    project: NexusGenRootTypes['Project'] | null; // Project
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    title: string; // String!
    type: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes: NexusGenRootTypes['Votes']; // Votes!
    votes_count: number; // Int!
  }
  Tag: { // field return type
    description: string | null; // String
    github: string | null; // String
    icon: string | null; // String
    id: number; // Int!
    isOfficial: boolean | null; // Boolean
    links: NexusGenRootTypes['TagLink'][]; // [TagLink!]!
    long_description: string | null; // String
    moderators: NexusGenRootTypes['User'][]; // [User!]!
    posts_count: number; // Int!
    title: string; // String!
  }
  TagLink: { // field return type
    name: string; // String!
    url: string; // String!
  }
  Tournament: { // field return type
    config: NexusGenRootTypes['TournamentConfig']; // TournamentConfig!
    contacts: NexusGenRootTypes['TournamentContact'][]; // [TournamentContact!]!
    cover_image: string; // String!
    description: string; // String!
    end_date: NexusGenScalars['Date']; // Date!
    events: NexusGenRootTypes['TournamentEvent'][]; // [TournamentEvent!]!
    events_count: number; // Int!
    faqs: NexusGenRootTypes['TournamentFAQ'][]; // [TournamentFAQ!]!
    id: number; // Int!
    judges: NexusGenRootTypes['TournamentJudge'][]; // [TournamentJudge!]!
    location: string; // String!
    makers_count: number; // Int!
    makers_deals: NexusGenRootTypes['TournamentMakerDeal'][]; // [TournamentMakerDeal!]!
    partners: NexusGenRootTypes['TournamentPartner'][]; // [TournamentPartner!]!
    prizes: NexusGenRootTypes['TournamentPrize'][]; // [TournamentPrize!]!
    projects_count: number; // Int!
    schedule: NexusGenRootTypes['TournamentSchedule'][]; // [TournamentSchedule!]!
    slug: string; // String!
    start_date: NexusGenScalars['Date']; // Date!
    thumbnail_image: string; // String!
    title: string; // String!
    tracks: NexusGenRootTypes['TournamentTrack'][]; // [TournamentTrack!]!
    website: string | null; // String
  }
  TournamentConfig: { // field return type
    feedFilters: string[] | null; // [String!]
    ideasRootNostrEventId: string | null; // String
    mainFeedHashtag: string | null; // String
    projectsSubmissionClosesOn: string | null; // String
    projectsSubmissionOpen: boolean; // Boolean!
    registerationOpen: boolean; // Boolean!
    showFeed: boolean | null; // Boolean
  }
  TournamentContact: { // field return type
    type: string; // String!
    url: string; // String!
  }
  TournamentEvent: { // field return type
    description: string; // String!
    ends_at: NexusGenScalars['Date']; // Date!
    id: number; // Int!
    image: string; // String!
    links: string[]; // [String!]!
    location: string; // String!
    starts_at: NexusGenScalars['Date']; // Date!
    title: string; // String!
    type: NexusGenEnums['TournamentEventTypeEnum']; // TournamentEventTypeEnum!
    website: string; // String!
  }
  TournamentFAQ: { // field return type
    answer: string; // String!
    id: number; // Int!
    question: string; // String!
  }
  TournamentJudge: { // field return type
    avatar: string | null; // String
    company: string | null; // String
    name: string; // String!
    twitter: string | null; // String
  }
  TournamentMakerDeal: { // field return type
    description: string; // String!
    title: string; // String!
    url: string | null; // String
  }
  TournamentMakersResponse: { // field return type
    hasNext: boolean | null; // Boolean
    hasPrev: boolean | null; // Boolean
    makers: NexusGenRootTypes['TournamentParticipant'][]; // [TournamentParticipant!]!
  }
  TournamentParticipant: { // field return type
    hacking_status: NexusGenEnums['TournamentMakerHackingStatusEnum']; // TournamentMakerHackingStatusEnum!
    is_registered: boolean | null; // Boolean
    user: NexusGenRootTypes['User']; // User!
  }
  TournamentPartner: { // field return type
    items: NexusGenRootTypes['TournamentPartnerItem'][]; // [TournamentPartnerItem!]!
    title: string; // String!
  }
  TournamentPartnerItem: { // field return type
    image: string; // String!
    isBigImage: boolean | null; // Boolean
    url: string; // String!
  }
  TournamentPrize: { // field return type
    additional_prizes: NexusGenRootTypes['TournamentPrizeAdditionalPrize'][] | null; // [TournamentPrizeAdditionalPrize!]
    description: string; // String!
    image: string; // String!
    positions: NexusGenRootTypes['TournamentPrizePosition'][]; // [TournamentPrizePosition!]!
    title: string; // String!
  }
  TournamentPrizeAdditionalPrize: { // field return type
    text: string; // String!
    url: string | null; // String
  }
  TournamentPrizePosition: { // field return type
    position: string; // String!
    project: string | null; // String
    reward: string; // String!
  }
  TournamentProjectsResponse: { // field return type
    allItemsCount: number | null; // Int
    hasNext: boolean | null; // Boolean
    hasPrev: boolean | null; // Boolean
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
  }
  TournamentSchedule: { // field return type
    date: string; // String!
    events: NexusGenRootTypes['TournamentScheduleEvent'][]; // [TournamentScheduleEvent!]!
  }
  TournamentScheduleEvent: { // field return type
    location: string | null; // String
    time: string | null; // String
    timezone: string | null; // String
    title: string; // String!
    type: string | null; // String
    url: string | null; // String
  }
  TournamentTrack: { // field return type
    icon: string; // String!
    id: number; // Int!
    title: string; // String!
  }
  User: { // field return type
    avatar: string; // String!
    bio: string | null; // String
    discord: string | null; // String
    github: string | null; // String
    id: number; // Int!
    in_tournament: boolean; // Boolean!
    jobTitle: string | null; // String
    join_date: NexusGenScalars['Date']; // Date!
    last_seen_notification_time: NexusGenScalars['Date']; // Date!
    lightning_address: string | null; // String
    linkedin: string | null; // String
    location: string | null; // String
    name: string; // String!
    nostr_keys: NexusGenRootTypes['NostrKey'][]; // [NostrKey!]!
    primary_nostr_key: string | null; // String
    private_data: NexusGenRootTypes['UserPrivateData']; // UserPrivateData!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    role: string | null; // String
    roles: NexusGenRootTypes['MakerRole'][]; // [MakerRole!]!
    similar_makers: NexusGenRootTypes['User'][]; // [User!]!
    skills: NexusGenRootTypes['MakerSkill'][]; // [MakerSkill!]!
    stories: NexusGenRootTypes['Story'][]; // [Story!]!
    tournaments: NexusGenRootTypes['Tournament'][]; // [Tournament!]!
    twitter: string | null; // String
    website: string | null; // String
  }
  UserPrivateData: { // field return type
    default_nostr_prv_key: string | null; // String
    default_nostr_pub_key: string | null; // String
    email: string | null; // String
    emails: NexusGenRootTypes['LinkedEmail'][]; // [LinkedEmail!]!
    id: number; // Int!
    walletsKeys: NexusGenRootTypes['WalletKey'][]; // [WalletKey!]!
  }
  Vote: { // field return type
    amount_in_sat: number; // Int!
    id: number; // Int!
    item_id: number; // Int!
    item_type: NexusGenEnums['VOTE_ITEM_TYPE']; // VOTE_ITEM_TYPE!
    paid: boolean; // Boolean!
    payment_hash: string; // String!
    payment_request: string; // String!
  }
  Voter: { // field return type
    amount_voted: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Votes: { // field return type
    total: number; // Int!
    total_anonymous_votes: number; // Int!
    voters: NexusGenRootTypes['Voter'][]; // [Voter!]!
  }
  WalletKey: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    is_current: boolean; // Boolean!
    key: string; // String!
    name: string; // String!
  }
  BaseUser: { // field return type
    avatar: string; // String!
    bio: string | null; // String
    discord: string | null; // String
    github: string | null; // String
    id: number; // Int!
    in_tournament: boolean; // Boolean!
    jobTitle: string | null; // String
    join_date: NexusGenScalars['Date']; // Date!
    last_seen_notification_time: NexusGenScalars['Date']; // Date!
    lightning_address: string | null; // String
    linkedin: string | null; // String
    location: string | null; // String
    name: string; // String!
    nostr_keys: NexusGenRootTypes['NostrKey'][]; // [NostrKey!]!
    primary_nostr_key: string | null; // String
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    role: string | null; // String
    roles: NexusGenRootTypes['MakerRole'][]; // [MakerRole!]!
    similar_makers: NexusGenRootTypes['User'][]; // [User!]!
    skills: NexusGenRootTypes['MakerSkill'][]; // [MakerSkill!]!
    stories: NexusGenRootTypes['Story'][]; // [Story!]!
    tournaments: NexusGenRootTypes['Tournament'][]; // [Tournament!]!
    twitter: string | null; // String
    website: string | null; // String
  }
  PostBase: { // field return type
    body: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    excerpt: string; // String!
    id: number; // Int!
    is_published: boolean | null; // Boolean
    title: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    votes: NexusGenRootTypes['Votes']; // Votes!
    votes_count: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Author: { // field return type name
    avatar: 'String'
    id: 'Int'
    join_date: 'Date'
    lightning_address: 'String'
    name: 'String'
  }
  Award: { // field return type name
    id: 'Int'
    image: 'String'
    project: 'Project'
    title: 'String'
    url: 'String'
  }
  Bounty: { // field return type name
    applicants_count: 'Int'
    applications: 'BountyApplication'
    author: 'User'
    body: 'String'
    cover_image: 'String'
    createdAt: 'Date'
    deadline: 'String'
    excerpt: 'String'
    id: 'Int'
    is_published: 'Boolean'
    reward_amount: 'Int'
    tags: 'Tag'
    title: 'String'
    type: 'String'
    updatedAt: 'Date'
    votes: 'Votes'
    votes_count: 'Int'
  }
  BountyApplication: { // field return type name
    author: 'User'
    date: 'String'
    id: 'Int'
    workplan: 'String'
  }
  Capability: { // field return type name
    icon: 'String'
    id: 'Int'
    title: 'String'
  }
  Category: { // field return type name
    apps_count: 'Int'
    cover_image: 'String'
    icon: 'String'
    id: 'Int'
    project: 'Project'
    title: 'String'
    votes_sum: 'Int'
  }
  CreateProjectResponse: { // field return type name
    project: 'Project'
  }
  Donation: { // field return type name
    amount: 'Int'
    by: 'User'
    createdAt: 'Date'
    id: 'Int'
    paid: 'Boolean'
    payment_hash: 'String'
    payment_request: 'String'
  }
  DonationsStats: { // field return type name
    applications: 'String'
    donations: 'String'
    prizes: 'String'
    touranments: 'String'
  }
  GenericMakerRole: { // field return type name
    icon: 'String'
    id: 'Int'
    title: 'String'
  }
  Hackathon: { // field return type name
    cover_image: 'String'
    description: 'String'
    end_date: 'Date'
    id: 'Int'
    location: 'String'
    start_date: 'Date'
    tags: 'Tag'
    title: 'String'
    website: 'String'
  }
  LinkedEmail: { // field return type name
    createdAt: 'Date'
    email: 'String'
  }
  LnurlDetails: { // field return type name
    commentAllowed: 'Int'
    maxSendable: 'Int'
    metadata: 'String'
    minSendable: 'Int'
  }
  MakerRole: { // field return type name
    icon: 'String'
    id: 'Int'
    level: 'RoleLevelEnum'
    title: 'String'
  }
  MakerSkill: { // field return type name
    id: 'Int'
    title: 'String'
  }
  Mutation: { // field return type name
    addProjectToTournament: 'ParticipationInfo'
    confirmDonation: 'Donation'
    confirmVote: 'Vote'
    createProject: 'CreateProjectResponse'
    createStory: 'Story'
    createTournament: 'Tournament'
    deleteProject: 'Project'
    deleteStory: 'Story'
    donate: 'Donation'
    linkNostrKey: 'User'
    registerInTournament: 'User'
    setUserNostrKeyAsPrimary: 'User'
    unlinkNostrKey: 'User'
    updateLastSeenNotificationTime: 'User'
    updateProfileDetails: 'User'
    updateProfileRoles: 'User'
    updateProject: 'CreateProjectResponse'
    updateTournament: 'Tournament'
    updateTournamentRegistration: 'ParticipationInfo'
    updateUserPreferences: 'User'
    vote: 'Vote'
  }
  NostrKey: { // field return type name
    createdAt: 'Date'
    is_primary: 'Boolean'
    key: 'String'
    label: 'String'
  }
  NostrKeyWithUser: { // field return type name
    key: 'String'
    user: 'User'
  }
  ParticipationInfo: { // field return type name
    createdAt: 'Date'
    email: 'String'
    hacking_status: 'TournamentMakerHackingStatusEnum'
    projects: 'ProjectInTournament'
  }
  PostComment: { // field return type name
    author: 'User'
    body: 'String'
    created_at: 'Date'
    id: 'Int'
    parentId: 'Int'
    votes_count: 'Int'
  }
  Project: { // field return type name
    awards: 'Award'
    capabilities: 'Capability'
    category: 'Category'
    cover_image: 'String'
    description: 'String'
    discord: 'String'
    figma: 'String'
    github: 'String'
    hashtag: 'String'
    id: 'Int'
    launch_status: 'ProjectLaunchStatusEnum'
    lightning_address: 'String'
    lnurl_callback_url: 'String'
    members: 'ProjectMember'
    members_count: 'Int'
    npub: 'String'
    permissions: 'ProjectPermissionEnum'
    recruit_roles: 'MakerRole'
    replit: 'String'
    screenshots: 'String'
    slack: 'String'
    stories: 'Story'
    tagline: 'String'
    tags: 'Tag'
    telegram: 'String'
    thumbnail_image: 'String'
    title: 'String'
    tournaments: 'ProjectTournament'
    twitter: 'String'
    votes_count: 'Int'
    website: 'String'
  }
  ProjectInTournament: { // field return type name
    project: 'Project'
    track: 'TournamentTrack'
  }
  ProjectMember: { // field return type name
    role: 'TEAM_MEMBER_ROLE'
    user: 'User'
  }
  ProjectTournament: { // field return type name
    tournament: 'Tournament'
    track: 'TournamentTrack'
  }
  Query: { // field return type name
    activeUsers: 'User'
    allCategories: 'Category'
    allProjects: 'Project'
    checkValidProjectHashtag: 'Boolean'
    getAllCapabilities: 'Capability'
    getAllHackathons: 'Hackathon'
    getAllMakersRoles: 'GenericMakerRole'
    getAllMakersSkills: 'MakerSkill'
    getCategory: 'Category'
    getDonationsStats: 'DonationsStats'
    getFeed: 'Post'
    getLnurlDetailsForProject: 'LnurlDetails'
    getMakersInTournament: 'TournamentMakersResponse'
    getMyDrafts: 'Post'
    getPostById: 'Post'
    getProject: 'Project'
    getProjectsById: 'Project'
    getProjectsInTournament: 'TournamentProjectsResponse'
    getTagInfo: 'Tag'
    getTournamentById: 'Tournament'
    getTournamentToRegister: 'Tournament'
    getTrendingPosts: 'Post'
    hottestProjects: 'Project'
    me: 'User'
    newProjects: 'Project'
    officialTags: 'Tag'
    popularTags: 'Tag'
    profile: 'User'
    projectsByCategory: 'Project'
    pubkeysOfMakersInTournament: 'String'
    pubkeysOfProjectsInTournament: 'String'
    recentProjectsInTag: 'Project'
    searchProjects: 'Project'
    searchUsers: 'User'
    similarMakers: 'User'
    similarProjects: 'Project'
    tournamentParticipationInfo: 'ParticipationInfo'
    usersByNostrKeys: 'NostrKeyWithUser'
  }
  Question: { // field return type name
    author: 'User'
    body: 'String'
    createdAt: 'Date'
    excerpt: 'String'
    id: 'Int'
    is_published: 'Boolean'
    tags: 'Tag'
    title: 'String'
    type: 'String'
    updatedAt: 'Date'
    votes: 'Votes'
    votes_count: 'Int'
  }
  Story: { // field return type name
    author: 'User'
    body: 'String'
    comments: 'PostComment'
    comments_count: 'Int'
    cover_image: 'String'
    createdAt: 'Date'
    excerpt: 'String'
    id: 'Int'
    is_published: 'Boolean'
    nostr_event_id: 'String'
    project: 'Project'
    tags: 'Tag'
    title: 'String'
    type: 'String'
    updatedAt: 'Date'
    votes: 'Votes'
    votes_count: 'Int'
  }
  Tag: { // field return type name
    description: 'String'
    github: 'String'
    icon: 'String'
    id: 'Int'
    isOfficial: 'Boolean'
    links: 'TagLink'
    long_description: 'String'
    moderators: 'User'
    posts_count: 'Int'
    title: 'String'
  }
  TagLink: { // field return type name
    name: 'String'
    url: 'String'
  }
  Tournament: { // field return type name
    config: 'TournamentConfig'
    contacts: 'TournamentContact'
    cover_image: 'String'
    description: 'String'
    end_date: 'Date'
    events: 'TournamentEvent'
    events_count: 'Int'
    faqs: 'TournamentFAQ'
    id: 'Int'
    judges: 'TournamentJudge'
    location: 'String'
    makers_count: 'Int'
    makers_deals: 'TournamentMakerDeal'
    partners: 'TournamentPartner'
    prizes: 'TournamentPrize'
    projects_count: 'Int'
    schedule: 'TournamentSchedule'
    slug: 'String'
    start_date: 'Date'
    thumbnail_image: 'String'
    title: 'String'
    tracks: 'TournamentTrack'
    website: 'String'
  }
  TournamentConfig: { // field return type name
    feedFilters: 'String'
    ideasRootNostrEventId: 'String'
    mainFeedHashtag: 'String'
    projectsSubmissionClosesOn: 'String'
    projectsSubmissionOpen: 'Boolean'
    registerationOpen: 'Boolean'
    showFeed: 'Boolean'
  }
  TournamentContact: { // field return type name
    type: 'String'
    url: 'String'
  }
  TournamentEvent: { // field return type name
    description: 'String'
    ends_at: 'Date'
    id: 'Int'
    image: 'String'
    links: 'String'
    location: 'String'
    starts_at: 'Date'
    title: 'String'
    type: 'TournamentEventTypeEnum'
    website: 'String'
  }
  TournamentFAQ: { // field return type name
    answer: 'String'
    id: 'Int'
    question: 'String'
  }
  TournamentJudge: { // field return type name
    avatar: 'String'
    company: 'String'
    name: 'String'
    twitter: 'String'
  }
  TournamentMakerDeal: { // field return type name
    description: 'String'
    title: 'String'
    url: 'String'
  }
  TournamentMakersResponse: { // field return type name
    hasNext: 'Boolean'
    hasPrev: 'Boolean'
    makers: 'TournamentParticipant'
  }
  TournamentParticipant: { // field return type name
    hacking_status: 'TournamentMakerHackingStatusEnum'
    is_registered: 'Boolean'
    user: 'User'
  }
  TournamentPartner: { // field return type name
    items: 'TournamentPartnerItem'
    title: 'String'
  }
  TournamentPartnerItem: { // field return type name
    image: 'String'
    isBigImage: 'Boolean'
    url: 'String'
  }
  TournamentPrize: { // field return type name
    additional_prizes: 'TournamentPrizeAdditionalPrize'
    description: 'String'
    image: 'String'
    positions: 'TournamentPrizePosition'
    title: 'String'
  }
  TournamentPrizeAdditionalPrize: { // field return type name
    text: 'String'
    url: 'String'
  }
  TournamentPrizePosition: { // field return type name
    position: 'String'
    project: 'String'
    reward: 'String'
  }
  TournamentProjectsResponse: { // field return type name
    allItemsCount: 'Int'
    hasNext: 'Boolean'
    hasPrev: 'Boolean'
    projects: 'Project'
  }
  TournamentSchedule: { // field return type name
    date: 'String'
    events: 'TournamentScheduleEvent'
  }
  TournamentScheduleEvent: { // field return type name
    location: 'String'
    time: 'String'
    timezone: 'String'
    title: 'String'
    type: 'String'
    url: 'String'
  }
  TournamentTrack: { // field return type name
    icon: 'String'
    id: 'Int'
    title: 'String'
  }
  User: { // field return type name
    avatar: 'String'
    bio: 'String'
    discord: 'String'
    github: 'String'
    id: 'Int'
    in_tournament: 'Boolean'
    jobTitle: 'String'
    join_date: 'Date'
    last_seen_notification_time: 'Date'
    lightning_address: 'String'
    linkedin: 'String'
    location: 'String'
    name: 'String'
    nostr_keys: 'NostrKey'
    primary_nostr_key: 'String'
    private_data: 'UserPrivateData'
    projects: 'Project'
    role: 'String'
    roles: 'MakerRole'
    similar_makers: 'User'
    skills: 'MakerSkill'
    stories: 'Story'
    tournaments: 'Tournament'
    twitter: 'String'
    website: 'String'
  }
  UserPrivateData: { // field return type name
    default_nostr_prv_key: 'String'
    default_nostr_pub_key: 'String'
    email: 'String'
    emails: 'LinkedEmail'
    id: 'Int'
    walletsKeys: 'WalletKey'
  }
  Vote: { // field return type name
    amount_in_sat: 'Int'
    id: 'Int'
    item_id: 'Int'
    item_type: 'VOTE_ITEM_TYPE'
    paid: 'Boolean'
    payment_hash: 'String'
    payment_request: 'String'
  }
  Voter: { // field return type name
    amount_voted: 'Int'
    user: 'User'
  }
  Votes: { // field return type name
    total: 'Int'
    total_anonymous_votes: 'Int'
    voters: 'Voter'
  }
  WalletKey: { // field return type name
    createdAt: 'Date'
    is_current: 'Boolean'
    key: 'String'
    name: 'String'
  }
  BaseUser: { // field return type name
    avatar: 'String'
    bio: 'String'
    discord: 'String'
    github: 'String'
    id: 'Int'
    in_tournament: 'Boolean'
    jobTitle: 'String'
    join_date: 'Date'
    last_seen_notification_time: 'Date'
    lightning_address: 'String'
    linkedin: 'String'
    location: 'String'
    name: 'String'
    nostr_keys: 'NostrKey'
    primary_nostr_key: 'String'
    projects: 'Project'
    role: 'String'
    roles: 'MakerRole'
    similar_makers: 'User'
    skills: 'MakerSkill'
    stories: 'Story'
    tournaments: 'Tournament'
    twitter: 'String'
    website: 'String'
  }
  PostBase: { // field return type name
    body: 'String'
    createdAt: 'Date'
    excerpt: 'String'
    id: 'Int'
    is_published: 'Boolean'
    title: 'String'
    updatedAt: 'Date'
    votes: 'Votes'
    votes_count: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProjectToTournament: { // args
      input?: NexusGenInputs['AddProjectToTournamentInput'] | null; // AddProjectToTournamentInput
    }
    confirmDonation: { // args
      payment_request: string; // String!
      preimage: string; // String!
    }
    confirmVote: { // args
      payment_request: string; // String!
      preimage: string; // String!
    }
    createProject: { // args
      input?: NexusGenInputs['CreateProjectInput'] | null; // CreateProjectInput
    }
    createStory: { // args
      data?: NexusGenInputs['StoryInputType'] | null; // StoryInputType
    }
    createTournament: { // args
      data?: NexusGenInputs['CreateTournamentInput'] | null; // CreateTournamentInput
    }
    deleteProject: { // args
      id: number; // Int!
    }
    deleteStory: { // args
      id: number; // Int!
    }
    donate: { // args
      amount_in_sat: number; // Int!
    }
    linkNostrKey: { // args
      event?: NexusGenInputs['NostrEventInput'] | null; // NostrEventInput
    }
    registerInTournament: { // args
      data?: NexusGenInputs['RegisterInTournamentInput'] | null; // RegisterInTournamentInput
      tournament_id: number; // Int!
    }
    setUserNostrKeyAsPrimary: { // args
      key: string; // String!
    }
    unlinkNostrKey: { // args
      key: string; // String!
    }
    updateLastSeenNotificationTime: { // args
      timestamp: string; // String!
    }
    updateProfileDetails: { // args
      data?: NexusGenInputs['ProfileDetailsInput'] | null; // ProfileDetailsInput
    }
    updateProfileRoles: { // args
      data?: NexusGenInputs['ProfileRolesInput'] | null; // ProfileRolesInput
    }
    updateProject: { // args
      input?: NexusGenInputs['UpdateProjectInput'] | null; // UpdateProjectInput
    }
    updateTournament: { // args
      data?: NexusGenInputs['UpdateTournamentInput'] | null; // UpdateTournamentInput
    }
    updateTournamentRegistration: { // args
      data?: NexusGenInputs['UpdateTournamentRegistrationInput'] | null; // UpdateTournamentRegistrationInput
      tournament_id: number; // Int!
    }
    updateUserPreferences: { // args
      newEmails?: NexusGenInputs['UserEmailInputType'][] | null; // [UserEmailInputType!]
      newKeys?: NexusGenInputs['UserKeyInputType'][] | null; // [UserKeyInputType!]
    }
    vote: { // args
      amount_in_sat: number; // Int!
      item_id: number; // Int!
      item_type: NexusGenEnums['VOTE_ITEM_TYPE']; // VOTE_ITEM_TYPE!
    }
  }
  Project: {
    members: { // args
      take?: number | null; // Int
    }
  }
  Query: {
    activeUsers: { // args
      lastDays: number | null; // Int
      tagId?: number | null; // Int
      take: number | null; // Int
    }
    allProjects: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    checkValidProjectHashtag: { // args
      hashtag: string; // String!
      projectId?: number | null; // Int
    }
    getAllHackathons: { // args
      sortBy?: string | null; // String
      tag?: number | null; // Int
    }
    getCategory: { // args
      id: number; // Int!
    }
    getFeed: { // args
      skip?: number | null; // Int
      sortBy?: string | null; // String
      tag?: number | null; // Int
      take: number | null; // Int
    }
    getLnurlDetailsForProject: { // args
      project_id: number; // Int!
    }
    getMakersInTournament: { // args
      openToConnect?: boolean | null; // Boolean
      roleId?: number | null; // Int
      search?: string | null; // String
      skip?: number | null; // Int
      take: number | null; // Int
      tournamentIdOrSlug: string; // String!
    }
    getMyDrafts: { // args
      type: NexusGenEnums['POST_TYPE']; // POST_TYPE!
    }
    getPostById: { // args
      id: number; // Int!
      type: NexusGenEnums['POST_TYPE']; // POST_TYPE!
    }
    getProject: { // args
      id?: number | null; // Int
      tag?: string | null; // String
    }
    getProjectsById: { // args
      ids: string[]; // [String!]!
    }
    getProjectsInTournament: { // args
      lookingForMakers?: boolean | null; // Boolean
      roleId?: number | null; // Int
      search?: string | null; // String
      skip?: number | null; // Int
      take: number | null; // Int
      tournamentId: number; // Int!
      trackId?: number | null; // Int
    }
    getTagInfo: { // args
      tag?: string | null; // String
    }
    getTournamentById: { // args
      idOrSlug: string; // String!
    }
    hottestProjects: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    newProjects: { // args
      skip?: number | null; // Int
      take: number | null; // Int
    }
    profile: { // args
      id: number; // Int!
    }
    projectsByCategory: { // args
      category_id: number; // Int!
      skip?: number | null; // Int
      take: number | null; // Int
    }
    pubkeysOfMakersInTournament: { // args
      tournamentIdOrSlug: string; // String!
    }
    pubkeysOfProjectsInTournament: { // args
      tournamentIdOrSlug: string; // String!
    }
    recentProjectsInTag: { // args
      tagId: number; // Int!
      take: number | null; // Int
    }
    searchProjects: { // args
      search: string; // String!
      skip?: number | null; // Int
      take: number | null; // Int
    }
    searchUsers: { // args
      value: string; // String!
    }
    similarMakers: { // args
      id: number; // Int!
    }
    similarProjects: { // args
      id: number; // Int!
    }
    tournamentParticipationInfo: { // args
      tournamentId: number; // Int!
    }
    usersByNostrKeys: { // args
      keys: string[]; // [String!]!
    }
  }
  User: {
    in_tournament: { // args
      id: number; // Int!
    }
  }
  BaseUser: {
    in_tournament: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Post: "Bounty" | "Question" | "Story"
  BaseUser: "User"
  PostBase: "Bounty" | "Question" | "Story"
}

export interface NexusGenTypeInterfaces {
  Bounty: "PostBase"
  Question: "PostBase"
  Story: "PostBase"
  User: "BaseUser"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "BaseUser" | "Post" | "PostBase";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}